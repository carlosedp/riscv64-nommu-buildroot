diff --git a/arch/riscv/boot/dts/kendryte/k210.dts b/arch/riscv/boot/dts/kendryte/k210.dts
index 0d1f28fce6b2b..3627f00175103 100644
--- a/arch/riscv/boot/dts/kendryte/k210.dts
+++ b/arch/riscv/boot/dts/kendryte/k210.dts
@@ -17,7 +17,14 @@
 	};
 };
 
+// &apb0 {
+// 	status = "okay";
+// };
+
 &uarths0 {
 	status = "okay";
 };
 
+&uart1 {
+	status = "okay";
+};
diff --git a/arch/riscv/boot/dts/kendryte/k210.dtsi b/arch/riscv/boot/dts/kendryte/k210.dtsi
index 4b9eeabb07f79..4e9d4400f9959 100644
--- a/arch/riscv/boot/dts/kendryte/k210.dtsi
+++ b/arch/riscv/boot/dts/kendryte/k210.dtsi
@@ -15,6 +15,7 @@
 
 	aliases {
 		serial0 = &uarths0;
+		serial1 = &uart1;
 	};
 
 	clocks {
@@ -119,5 +120,31 @@
 			interrupts = <33>;
 			clocks = <&sysctl 0>;
 		};
+
+		/*
+		apb0: bus@50200000 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "kendryte,k210-apb", "simple-pm-bus";
+			ranges;
+			clocks = <&sysctl 0>;
+			// clocks = <&sysclk K210_CLK_APB0>;
+		*/
+
+			uart1: serial@50210000 {
+				compatible = "snps,dw-apb-uart";
+				reg = <0x50210000 0x100>;
+				interrupts = <11>;
+				// clocks = <&sysclk K210_CLK_UART1>;
+				// resets = <&sysrst K210_RST_UART1>;
+				clock-frequency = <195000000>;
+				reg-io-width = <4>;
+				reg-shift = <2>;
+				dcd-override;
+				dsr-override;
+				cts-override;
+				ri-override;
+			};
+		// };
 	};
 };
diff --git a/drivers/soc/kendryte/k210-sysctl.c b/drivers/soc/kendryte/k210-sysctl.c
index 7d4ecd954af0b..83e0ee7f526fb 100644
--- a/drivers/soc/kendryte/k210-sysctl.c
+++ b/drivers/soc/kendryte/k210-sysctl.c
@@ -9,6 +9,7 @@
 #include <linux/platform_device.h>
 #include <linux/clk-provider.h>
 #include <linux/clkdev.h>
+#include <linux/delay.h>
 #include <asm/soc.h>
 
 #define K210_SYSCTL_CLK0_FREQ		26000000UL
@@ -79,6 +80,57 @@
 #define   CLKEN_SHA		(1 << 26)
 #define   CLKEN_OTP		(1 << 27)
 #define   CLKEN_RTC		(1 << 29)
+#define K210_SYSCTL_PERI_RESET		0x34
+#define   RESET_UART1		(1 << 16)
+
+#define K210_FPIOA_FPIOA_BASE_ADDR	0x502B0000ULL
+
+#define FPIOA_DEFAULT_GPIOHS8   0x00901f20 /* GPIO High speed 8 */
+#define FPIOA_DEFAULT_GPIOHS9   0x00901f21 /* GPIO High speed 9 */
+#define FPIOA_DEFAULT_UART1_RX  0x00900040 /* UART1 Receiver */
+#define FPIOA_DEFAULT_UART1_TX  0x00001f41 /* UART1 Transmitter */
+
+#define FPIOA_PU 0x00010000 /* Pull up */
+#define FPIOA_PD 0x00020000 /* Pull down */
+
+#define PIN_ISP_RX 4
+#define PIN_ISP_TX 5
+#define PIN_LED_BLUE 12
+#define PIN_LED_GREEN 13
+#define PIN_LED_RED 14
+#define PIN_WIFI_TX 6
+#define PIN_WIFI_RX 7
+#define PIN_WIFI_EN 8
+
+#define K210_GPIOHS_GPIOHS_BASE_ADDR	0x38001000ULL
+
+#define K210_GPIOHS_INPUT_VAL	0x00
+#define K210_GPIOHS_INPUT_EN	0x04
+#define K210_GPIOHS_OUTPUT_EN	0x08
+#define K210_GPIOHS_OUTPUT_VAL	0x0C
+
+#define K210_UART_UART1_BASE_ADDR	0x50210000ULL
+
+#define K210_UART_RBR		0x00
+#define K210_UART_DLL		0x00
+#define K210_UART_THR		0x00
+#define K210_UART_DLH		0x04
+#define K210_UART_IER		0x04
+#define K210_UART_FCR		0x08
+#define K210_UART_IIR		0x08
+#define K210_UART_LCR		0x0c
+#define K210_UART_DLF		0xc0
+#define K210_UART_LSR		0x14
+
+#define UART_SEND_FIFO_0	0
+#define UART_SEND_FIFO_2	1
+#define UART_SEND_FIFO_4	2
+#define UART_SEND_FIFO_8	3
+
+#define UART_RECEIVE_FIFO_1	0
+#define UART_RECEIVE_FIFO_4	1
+#define UART_RECEIVE_FIFO_8	2
+#define UART_RECEIVE_FIFO_14	3
 
 struct k210_sysctl {
 	void __iomem		*regs;
@@ -216,6 +268,77 @@ static int __init k210_sysctl_init(void)
 }
 core_initcall(k210_sysctl_init);
 
+static unsigned long k210_sysctl_get_apb0_clk(void __iomem *regs)
+{
+	u32 clksel0, pll0;
+	u64 pll0_freq, clkr0, clkf0, clkod0;
+	unsigned long aclk, div;
+
+	/*
+	 * If the clock selector is not set, use the base frequency.
+	 * Otherwise, use PLL0 frequency with a frequency divisor.
+	 */
+	clksel0 = readl(regs + K210_SYSCTL_CLKSEL0);
+	if (!(clksel0 & CLKSEL_ACLK))
+		return K210_SYSCTL_CLK0_FREQ;
+
+	/*
+	 * Get PLL0 frequency:
+	 * freq = base frequency * clkf0 / (clkr0 * clkod0)
+	 */
+	pll0 = readl(regs + K210_SYSCTL_PLL0);
+	clkr0 = 1 + (pll0 & 0x0000000f);
+	clkf0 = 1 + ((pll0 & 0x000003f0) >> 4);
+	clkod0 = 1 + ((pll0 & 0x00003c00) >> 10);
+	pll0_freq = clkf0 * K210_SYSCTL_CLK0_FREQ / (clkr0 * clkod0);
+
+	/* Get the frequency divisor from the clock selector */
+	aclk = pll0_freq / (2ULL << ((clksel0 & 0x00000006) >> 1));
+	/*
+	    source = sysctl_clock_source_get_freq(SYSCTL_SOURCE_ACLK);
+	    result = source / (sysctl_clock_get_threshold(SYSCTL_THRESHOLD_APB0) + 1);
+		div = (int)sysctl->clk_sel0.apb0_clk_sel + 1;
+	*/
+	div = (readl(regs + K210_SYSCTL_CLKSEL0) >> 3) & 7;
+	return aclk / (div + 1);
+}
+
+static void uart_setup(void __iomem *regs, unsigned long apb_clk)
+{
+	u32 data_width = 8;
+	u32 stopbit_val = 0;
+	u32 parity_val = 0;
+	u32 divisor = apb_clk / 115200;
+	printk("uart_setup: divisor is %d DLH %02x DLL %02x DLF %02x\n", divisor,
+		(divisor >> 12) & 0xff,
+		(divisor >> 4) & 0xff,
+		(divisor & 0xf));
+
+	// Set Divisor Latch Access Bit (enables DLL DLH) to set baudrate
+	writel(1u << 7, regs + K210_UART_LCR);
+	writel((divisor >> 12) & 0xff, regs + K210_UART_DLH);
+	writel((divisor >> 4) & 0xff, regs + K210_UART_DLL);
+	writel(divisor & 0xf, regs + K210_UART_DLF);
+	// Clear Divisor Latch Access Bit after setting baudrate
+	writel((data_width - 5) | (stopbit_val << 2) | (parity_val << 3), regs + K210_UART_LCR);
+	writel(0x80, regs + K210_UART_IER); /* THRE */
+	writel(UART_RECEIVE_FIFO_1 << 6 | UART_SEND_FIFO_8 << 4 | 0x1 << 3 | 0x1, regs + K210_UART_FCR);
+}
+
+static void uart_putc(char c, void __iomem *regs)
+{
+    while (readl(regs + K210_UART_LSR) & (1u << 5))
+        continue;
+    writel(c, regs + K210_UART_THR);
+}
+
+static int uart_getc(void __iomem *regs)
+{
+    while (!(readl(regs + K210_UART_LSR) & 1u))
+        continue;
+    return readl(regs + K210_UART_RBR) & 0xff;
+}
+
 /*
  * This needs to be called very early during initialization, given that
  * PLL1 needs to be enabled to be able to use all SRAM.
@@ -223,23 +346,101 @@ core_initcall(k210_sysctl_init);
 static void __init k210_soc_early_init(const void *fdt)
 {
 	void __iomem *regs;
+	void __iomem *fpioa;
+	void __iomem *gpiohs;
+	void __iomem *uart1;
+	int x=0, y=0;
 
 	regs = ioremap(K210_SYSCTL_SYSCTL_BASE_ADDR, 0x1000);
 	if (!regs)
 		panic("K210 sysctl ioremap");
 
+	fpioa = ioremap(K210_FPIOA_FPIOA_BASE_ADDR, 0x1000);
+	if (!regs)
+		panic("K210 fpioa ioremap");
+
+	gpiohs = ioremap(K210_GPIOHS_GPIOHS_BASE_ADDR, 0x1000);
+	if (!regs)
+		panic("K210 gpiohs ioremap");
+
+	uart1 = ioremap(K210_UART_UART1_BASE_ADDR, 0x1000);
+	if (!regs)
+		panic("K210 gpiohs ioremap");
+
 	/* Enable PLL1 to make the KPU SRAM useable */
 	k210_pll1_enable(regs);
 
 	k210_set_bits(PLL_OUT_EN, regs + K210_SYSCTL_PLL0);
 
-	k210_set_bits(CLKEN_CPU | CLKEN_SRAM0 | CLKEN_SRAM1,
+	k210_set_bits(CLKEN_CPU | CLKEN_SRAM0 | CLKEN_SRAM1
+			| CLKEN_APB0 | CLKEN_APB1,
 		      regs + K210_SYSCTL_CLKEN_CENT);
-	k210_set_bits(CLKEN_ROM | CLKEN_TIMER0 | CLKEN_RTC,
+	k210_set_bits(CLKEN_ROM | CLKEN_TIMER0 | CLKEN_RTC | CLKEN_UART1 | CLKEN_FPIO,
 		      regs + K210_SYSCTL_CLKEN_PERI);
 
 	k210_set_bits(CLKSEL_ACLK, regs + K210_SYSCTL_CLKSEL0);
 
+	/* Set FPIOA functions for WIFI pins. */
+	writel(FPIOA_DEFAULT_GPIOHS8 | FPIOA_PD, fpioa + PIN_WIFI_EN * 4);
+	writel(FPIOA_DEFAULT_UART1_RX, fpioa + PIN_WIFI_TX * 4);
+	writel(FPIOA_DEFAULT_UART1_TX, fpioa + PIN_WIFI_RX * 4);
+
+	/** Reset and enable WIFI. Use GPIOHS8 for the WIFI_EN signal. */
+	k210_clear_bits(BIT(8), gpiohs + K210_GPIOHS_INPUT_EN);
+	k210_set_bits(BIT(8), gpiohs + K210_GPIOHS_OUTPUT_EN);
+	k210_clear_bits(BIT(8), gpiohs + K210_GPIOHS_OUTPUT_VAL);
+	for (y=0; y<20000000; ++y) {
+		nop();
+	}
+	k210_set_bits(BIT(8), gpiohs + K210_GPIOHS_OUTPUT_VAL);
+
+	/** Blink blue led (FPIOA+GPIOHS test). */
+	writel(FPIOA_DEFAULT_GPIOHS9 | FPIOA_PD, fpioa + PIN_LED_BLUE * 4);
+	k210_clear_bits(BIT(9), gpiohs + K210_GPIOHS_INPUT_EN);
+	k210_set_bits(BIT(9), gpiohs + K210_GPIOHS_OUTPUT_EN);
+	for (x=0; x<3; ++x) {
+		k210_set_bits(BIT(9), gpiohs + K210_GPIOHS_OUTPUT_VAL);
+		for (y=0; y<20000000; ++y) {
+			nop();
+		}
+		k210_clear_bits(BIT(9), gpiohs + K210_GPIOHS_OUTPUT_VAL);
+		for (y=0; y<20000000; ++y) {
+			nop();
+		}
+	}
+
+	/** Reset UART1 */
+	k210_set_bits(RESET_UART1, regs + K210_SYSCTL_PERI_RESET);
+	for (y=0; y<20000000; ++y) {
+		nop();
+	}
+	k210_clear_bits(RESET_UART1, regs + K210_SYSCTL_PERI_RESET);
+
+#if 0
+	/** Do echo test on UART1. */
+	{
+		unsigned long apb_clk = k210_sysctl_get_apb0_clk(regs);
+
+		printk("?????? APB0 clock is %ld\n", apb_clk);
+		uart_setup(uart1, apb_clk);
+
+		printk("start echo test\n");
+		uart_putc('A', uart1);
+		uart_putc('T', uart1);
+		uart_putc('\r', uart1);
+		uart_putc('\n', uart1);
+
+		printk("start receive\n");
+
+		printk("recv 1: %c\n", uart_getc(uart1));
+		printk("recv 2: %c\n", uart_getc(uart1));
+
+	}
+#endif
+
 	iounmap(regs);
+	iounmap(fpioa);
+	iounmap(gpiohs);
+	iounmap(uart1);
 }
 SOC_EARLY_INIT_DECLARE("kendryte,k210", k210_soc_early_init);
diff --git a/drivers/tty/serial/sifive.c b/drivers/tty/serial/sifive.c
index d5f81b98e4d75..6894552aefdc3 100644
--- a/drivers/tty/serial/sifive.c
+++ b/drivers/tty/serial/sifive.c
@@ -467,6 +467,7 @@ static void __ssp_update_div(struct sifive_serial_port *ssp)
 	div = DIV_ROUND_UP(ssp->clkin_rate, ssp->baud_rate) - 1;
 
 	__ssp_writel(div, SIFIVE_SERIAL_DIV_OFFS, ssp);
+	printk("SSP rate: %04x\n", div);
 }
 
 /**
@@ -742,6 +743,9 @@ static int __init early_sifive_serial_setup(struct earlycon_device *dev,
 
 	dev->con->write = early_sifive_serial_write;
 
+	/* HACK: initial baud for debugging */
+	__ssp_early_writel(0x0d39, SIFIVE_SERIAL_DIV_OFFS, port);
+
 	return 0;
 }
 

diff --git a/arch/riscv/configs/nommu_k210_defconfig b/arch/riscv/configs/nommu_k210_defconfig
index 00ded8f0bc551..65a6885ec2d0e 100644
--- a/arch/riscv/configs/nommu_k210_defconfig
+++ b/arch/riscv/configs/nommu_k210_defconfig
@@ -66,3 +66,12 @@ CONFIG_PRINTK_TIME=y
 # CONFIG_RCU_TRACE is not set
 # CONFIG_FTRACE is not set
 # CONFIG_RUNTIME_TESTING_MENU is not set
+#
+#
+CONFIG_SERIAL_8250=y
+CONFIG_SERIAL_8250_NR_UARTS=4
+CONFIG_SERIAL_8250_RUNTIME_UARTS=4
+CONFIG_SERIAL_8250_DEPRECATED_OPTIONS=n
+CONFIG_SERIAL_8250_DWLIB=y
+CONFIG_SERIAL_8250_DW=y
+CONFIG_SERIAL_OF_PLATFORM=y

diff --git a/drivers/soc/kendryte/k210-sysctl.c b/drivers/soc/kendryte/k210-sysctl.c
index 83e0ee7f526fb..acc61e88100ec 100644
--- a/drivers/soc/kendryte/k210-sysctl.c
+++ b/drivers/soc/kendryte/k210-sysctl.c
@@ -109,29 +109,6 @@
 #define K210_GPIOHS_OUTPUT_EN	0x08
 #define K210_GPIOHS_OUTPUT_VAL	0x0C
 
-#define K210_UART_UART1_BASE_ADDR	0x50210000ULL
-
-#define K210_UART_RBR		0x00
-#define K210_UART_DLL		0x00
-#define K210_UART_THR		0x00
-#define K210_UART_DLH		0x04
-#define K210_UART_IER		0x04
-#define K210_UART_FCR		0x08
-#define K210_UART_IIR		0x08
-#define K210_UART_LCR		0x0c
-#define K210_UART_DLF		0xc0
-#define K210_UART_LSR		0x14
-
-#define UART_SEND_FIFO_0	0
-#define UART_SEND_FIFO_2	1
-#define UART_SEND_FIFO_4	2
-#define UART_SEND_FIFO_8	3
-
-#define UART_RECEIVE_FIFO_1	0
-#define UART_RECEIVE_FIFO_4	1
-#define UART_RECEIVE_FIFO_8	2
-#define UART_RECEIVE_FIFO_14	3
-
 struct k210_sysctl {
 	void __iomem		*regs;
 	struct clk_hw		hw;
@@ -268,77 +245,6 @@ static int __init k210_sysctl_init(void)
 }
 core_initcall(k210_sysctl_init);
 
-static unsigned long k210_sysctl_get_apb0_clk(void __iomem *regs)
-{
-	u32 clksel0, pll0;
-	u64 pll0_freq, clkr0, clkf0, clkod0;
-	unsigned long aclk, div;
-
-	/*
-	 * If the clock selector is not set, use the base frequency.
-	 * Otherwise, use PLL0 frequency with a frequency divisor.
-	 */
-	clksel0 = readl(regs + K210_SYSCTL_CLKSEL0);
-	if (!(clksel0 & CLKSEL_ACLK))
-		return K210_SYSCTL_CLK0_FREQ;
-
-	/*
-	 * Get PLL0 frequency:
-	 * freq = base frequency * clkf0 / (clkr0 * clkod0)
-	 */
-	pll0 = readl(regs + K210_SYSCTL_PLL0);
-	clkr0 = 1 + (pll0 & 0x0000000f);
-	clkf0 = 1 + ((pll0 & 0x000003f0) >> 4);
-	clkod0 = 1 + ((pll0 & 0x00003c00) >> 10);
-	pll0_freq = clkf0 * K210_SYSCTL_CLK0_FREQ / (clkr0 * clkod0);
-
-	/* Get the frequency divisor from the clock selector */
-	aclk = pll0_freq / (2ULL << ((clksel0 & 0x00000006) >> 1));
-	/*
-	    source = sysctl_clock_source_get_freq(SYSCTL_SOURCE_ACLK);
-	    result = source / (sysctl_clock_get_threshold(SYSCTL_THRESHOLD_APB0) + 1);
-		div = (int)sysctl->clk_sel0.apb0_clk_sel + 1;
-	*/
-	div = (readl(regs + K210_SYSCTL_CLKSEL0) >> 3) & 7;
-	return aclk / (div + 1);
-}
-
-static void uart_setup(void __iomem *regs, unsigned long apb_clk)
-{
-	u32 data_width = 8;
-	u32 stopbit_val = 0;
-	u32 parity_val = 0;
-	u32 divisor = apb_clk / 115200;
-	printk("uart_setup: divisor is %d DLH %02x DLL %02x DLF %02x\n", divisor,
-		(divisor >> 12) & 0xff,
-		(divisor >> 4) & 0xff,
-		(divisor & 0xf));
-
-	// Set Divisor Latch Access Bit (enables DLL DLH) to set baudrate
-	writel(1u << 7, regs + K210_UART_LCR);
-	writel((divisor >> 12) & 0xff, regs + K210_UART_DLH);
-	writel((divisor >> 4) & 0xff, regs + K210_UART_DLL);
-	writel(divisor & 0xf, regs + K210_UART_DLF);
-	// Clear Divisor Latch Access Bit after setting baudrate
-	writel((data_width - 5) | (stopbit_val << 2) | (parity_val << 3), regs + K210_UART_LCR);
-	writel(0x80, regs + K210_UART_IER); /* THRE */
-	writel(UART_RECEIVE_FIFO_1 << 6 | UART_SEND_FIFO_8 << 4 | 0x1 << 3 | 0x1, regs + K210_UART_FCR);
-}
-
-static void uart_putc(char c, void __iomem *regs)
-{
-    while (readl(regs + K210_UART_LSR) & (1u << 5))
-        continue;
-    writel(c, regs + K210_UART_THR);
-}
-
-static int uart_getc(void __iomem *regs)
-{
-    while (!(readl(regs + K210_UART_LSR) & 1u))
-        continue;
-    return readl(regs + K210_UART_RBR) & 0xff;
-}
-
 /*
  * This needs to be called very early during initialization, given that
  * PLL1 needs to be enabled to be able to use all SRAM.
@@ -348,7 +254,6 @@ static void __init k210_soc_early_init(const void *fdt)
 	void __iomem *regs;
 	void __iomem *fpioa;
 	void __iomem *gpiohs;
-	void __iomem *uart1;
 	int x=0, y=0;
 
 	regs = ioremap(K210_SYSCTL_SYSCTL_BASE_ADDR, 0x1000);
@@ -363,10 +268,6 @@ static void __init k210_soc_early_init(const void *fdt)
 	if (!regs)
 		panic("K210 gpiohs ioremap");
 
-	uart1 = ioremap(K210_UART_UART1_BASE_ADDR, 0x1000);
-	if (!regs)
-		panic("K210 gpiohs ioremap");
-
 	/* Enable PLL1 to make the KPU SRAM useable */
 	k210_pll1_enable(regs);
 
@@ -416,31 +317,8 @@ static void __init k210_soc_early_init(const void *fdt)
 	}
 	k210_clear_bits(RESET_UART1, regs + K210_SYSCTL_PERI_RESET);
 
-#if 0
-	/** Do echo test on UART1. */
-	{
-		unsigned long apb_clk = k210_sysctl_get_apb0_clk(regs);
-
-		printk("?????? APB0 clock is %ld\n", apb_clk);
-		uart_setup(uart1, apb_clk);
-
-		printk("start echo test\n");
-		uart_putc('A', uart1);
-		uart_putc('T', uart1);
-		uart_putc('\r', uart1);
-		uart_putc('\n', uart1);
-
-		printk("start receive\n");
-
-		printk("recv 1: %c\n", uart_getc(uart1));
-		printk("recv 2: %c\n", uart_getc(uart1));
-
-	}
-#endif
-
 	iounmap(regs);
 	iounmap(fpioa);
 	iounmap(gpiohs);
-	iounmap(uart1);
 }
 SOC_EARLY_INIT_DECLARE("kendryte,k210", k210_soc_early_init);

diff --git a/drivers/soc/kendryte/k210-sysctl.c b/drivers/soc/kendryte/k210-sysctl.c
index acc61e88100ec..a5add4c53eb99 100644
--- a/drivers/soc/kendryte/k210-sysctl.c
+++ b/drivers/soc/kendryte/k210-sysctl.c
@@ -86,7 +86,6 @@
 #define K210_FPIOA_FPIOA_BASE_ADDR	0x502B0000ULL
 
 #define FPIOA_DEFAULT_GPIOHS8   0x00901f20 /* GPIO High speed 8 */
-#define FPIOA_DEFAULT_GPIOHS9   0x00901f21 /* GPIO High speed 9 */
 #define FPIOA_DEFAULT_UART1_RX  0x00900040 /* UART1 Receiver */
 #define FPIOA_DEFAULT_UART1_TX  0x00001f41 /* UART1 Transmitter */
 
@@ -254,7 +253,7 @@ static void __init k210_soc_early_init(const void *fdt)
 	void __iomem *regs;
 	void __iomem *fpioa;
 	void __iomem *gpiohs;
-	int x=0, y=0;
+	int y=0;
 
 	regs = ioremap(K210_SYSCTL_SYSCTL_BASE_ADDR, 0x1000);
 	if (!regs)
@@ -295,21 +294,6 @@ static void __init k210_soc_early_init(const void *fdt)
 	}
 	k210_set_bits(BIT(8), gpiohs + K210_GPIOHS_OUTPUT_VAL);
 
-	/** Blink blue led (FPIOA+GPIOHS test). */
-	writel(FPIOA_DEFAULT_GPIOHS9 | FPIOA_PD, fpioa + PIN_LED_BLUE * 4);
-	k210_clear_bits(BIT(9), gpiohs + K210_GPIOHS_INPUT_EN);
-	k210_set_bits(BIT(9), gpiohs + K210_GPIOHS_OUTPUT_EN);
-	for (x=0; x<3; ++x) {
-		k210_set_bits(BIT(9), gpiohs + K210_GPIOHS_OUTPUT_VAL);
-		for (y=0; y<20000000; ++y) {
-			nop();
-		}
-		k210_clear_bits(BIT(9), gpiohs + K210_GPIOHS_OUTPUT_VAL);
-		for (y=0; y<20000000; ++y) {
-			nop();
-		}
-	}
-
 	/** Reset UART1 */
 	k210_set_bits(RESET_UART1, regs + K210_SYSCTL_PERI_RESET);
 	for (y=0; y<20000000; ++y) {

diff --git a/drivers/soc/kendryte/k210-sysctl.c b/drivers/soc/kendryte/k210-sysctl.c
index a5add4c53eb99..4d576ee4bc732 100644
--- a/drivers/soc/kendryte/k210-sysctl.c
+++ b/drivers/soc/kendryte/k210-sysctl.c
@@ -83,8 +83,10 @@
 #define K210_SYSCTL_PERI_RESET		0x34
 #define   RESET_UART1		(1 << 16)
 
+/* Registers base address */
 #define K210_FPIOA_FPIOA_BASE_ADDR	0x502B0000ULL
 
+/* FPIOA progammable I/O configuration values */
 #define FPIOA_DEFAULT_GPIOHS8   0x00901f20 /* GPIO High speed 8 */
 #define FPIOA_DEFAULT_UART1_RX  0x00900040 /* UART1 Receiver */
 #define FPIOA_DEFAULT_UART1_TX  0x00001f41 /* UART1 Transmitter */
@@ -92,22 +94,20 @@
 #define FPIOA_PU 0x00010000 /* Pull up */
 #define FPIOA_PD 0x00020000 /* Pull down */
 
-#define PIN_ISP_RX 4
-#define PIN_ISP_TX 5
-#define PIN_LED_BLUE 12
-#define PIN_LED_GREEN 13
-#define PIN_LED_RED 14
-#define PIN_WIFI_TX 6
-#define PIN_WIFI_RX 7
-#define PIN_WIFI_EN 8
-
+/* Registers base address */
 #define K210_GPIOHS_GPIOHS_BASE_ADDR	0x38001000ULL
 
+/* Registers */
 #define K210_GPIOHS_INPUT_VAL	0x00
 #define K210_GPIOHS_INPUT_EN	0x04
 #define K210_GPIOHS_OUTPUT_EN	0x08
 #define K210_GPIOHS_OUTPUT_VAL	0x0C
 
+/* Pin numbers (Maix Go board) */
+#define PIN_WIFI_TX 6
+#define PIN_WIFI_RX 7
+#define PIN_WIFI_EN 8
+
 struct k210_sysctl {
 	void __iomem		*regs;
 	struct clk_hw		hw;

